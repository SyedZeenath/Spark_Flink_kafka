package customrcvr;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.ConnectException;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.regex.Pattern;

import org.apache.spark.SparkConf;
import org.apache.spark.storage.StorageLevel;
import org.apache.spark.streaming.Duration;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;
import org.apache.spark.streaming.receiver.Receiver;

import com.google.common.io.Closeables;

public class CustomRcvr extends Receiver<String> {
	private static final Pattern SPACE = Pattern.compile(" ");
	
	public static void main(String[] args) throws Exception{
		if (args.length < 2) {
			System.err.println("USage: CustomRcvr <hostname> <port>");
			System.exit(1);
		}
		
		StreamingExamples.setStreamingLogLevels();
		
		SparkConf sparkConf = new SparkConf().setAppName("CustomeReceiver");
		JavaStreamingContext ssc = new JavaStreamingContext(sparkConf, new Duration(1000));
		
		JavaReceiverInputDStream<String> lines = ssc.receiverStream(new CustomRcvr(args[0], Integer.parseInt(args[1])));
		JavaDStream<String> words =lines.flatMap(x -> Arrays.asList(SPACE.split(x)).iterator());
		JavaPairDStream<String, Integer> wordcounts = words.mapToPair(s -> new Tuple2<>(s,1)).reduceByKey((i1, i2) -> i1+i2);
		
		wordcounts.print();
		ssc.start();
		ssc.awaitTermination();
		
		
	}
	String host = null;
	int port = -1;
	
	public CustomerRcvr(String host_, int port_) {
		super(StorageLevel.MEMORY_AND_DISK_2());
		host=host_;
		port=port_;
	}
	@override
	public void onStart() {
		new Thread(this::recive).start();
	}
	
	@override
	public void onStop() {
		
	}
	private void receive() {
		try {
			Socket socket =null;
			BufferedReader reader = null;
			try {
				socket = new Socket("localhost", 9999);
				reader = new BufferedReader(new InputStreamReader(socket.getInputStream(), StandardCharsets.UTF_8));
				String userInput;
				while(!isStopped() && (userInput = reader.readLine()) != null) {
					System.out.println("Received data '" +userInput + "'");
					store(userInput);
				}
				
			}finally {
				Closeables.close(reader, /* swallowIOException = */ true);
				Closeables.close(socket, /* swallowIOException = */ true);
			}
			restart("trying to connect again");
		}catch(ConnectException ce) {
			restart("could not connect", ce);
		}catch(Throwable t) {
			restart("Error receiving data", t);
		}
	}
	
	

}
