package streamsql;

import java.util.Arrays;
import java.util.regex.Pattern;

import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.StorageLevels;
import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;
import org.apache.spark.sql.SparkSession;
import org.apache.spark.streaming.Durations;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;

public final class StreamSql {
	
	private static final Pattern SPACE =Pattern.compile(" ");
	
	public static void main(String[] args) throws Exception{
		if(args.length < 2) {
			System.err.println("Usage: workcount <hostname> <port>");
			System.exit(1);
			
		}
		SparkConf sparkConf = new SparkConf().setMaster("local[*]").setAppName("StreamSQL");
		JavaStreamingContext ssc = new JavaStreamingContext(sparkConf, Durations.seconds(1));
		
		JavaReceiverInputDStream<String> lines = ssc.socketTextStream(args[0], Integer.parseInt(args[1]), StorageLevels.MEMORY_AND_DISK_SER);
		JavaDStream<String> words = lines.flatMap(x -> Arrays.asList(SPACE.split(x)).iterator());
		
		words.foreachRDD((rdd, time)-> { 
			
		SparkSession spark = JavaSparkSessionSingleton.getInstance(rdd.context().getConf());
		
		JavaRDD<JavaRecord> rowRDD = rdd.map(word -> {
	        JavaRecord record = new JavaRecord();
	        record.setWord(word);
	        return record;
	});
		
		Dataset<Row> wordsDataFrame = spark.createDataFrame(rowRDD,JavaRecord.class);
		wordsDataFrame.createOrReplaceTempView("words");
		Dataset<Row> wordCountsDataFrame = spark.sql("select word count(*) as total from words group by word");
		System.out.println("------" + time + "------");
		wordCountsDataFrame.show();
	});
		ssc.start();
		ssc.awaitTermination();
	}
	
	static class JavaSparkSessionSingleton{
		private static transient SparkSession instance = null;
		public static SparkSession getInstance(SparkConf sparkConf) {
			if (instance == null) {
				instance = SparkSession.builder().config(sparkConf).getOrCreate();
			}
			return instance;
		}
	}
		
		
	}

	
